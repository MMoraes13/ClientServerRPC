#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/time.h>
#include <stdlib.h>
#include <memory.h>
#include <ifaddrs.h>
#include <net/if.h>
#include <stdarg.h>
/* the next two includes probably aren't relevant for you, but I typically use them all anyway */
#include <math.h>
#include <sys/termios.h>

#define MAX_CONNECTIONS    (1000)
#define MAX_LINE           (1000)
#define LENGHT				1000


int main()
{
  int sockfd;
  sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

  struct sockaddr_in my_addr;
  my_addr.sin_family = AF_INET;
  my_addr.sin_addr.s_addr = htonl(INADDR_ANY);
  my_addr.sin_port = htons(4000);

  bind(sockfd, (struct sockaddr *) &my_addr, sizeof(my_addr));
  listen(sockfd, MAX_CONNECTIONS);

	while(1)
	{
	  struct sockaddr_in client_addr;
	  int client_len = sizeof(client_addr);

	  int client_fd = accept(sockfd, (struct sockaddr *) &client_addr,  &client_len);

	  FILE *fp = fopen("send", "r");

		if(fp == NULL)
		{
		    printf("ERROR: File %s not found.\n", f_name);
		    exit(1);
		}
		else {
		  char buf[MAX_LINE];
		  fread(buf, sizeof(char), LENGTH, fp)
		  
		  send(client_fd, buf, strlen(buf) + 1, 0);
		  close(client_fd);
		  fclose (fp);
		}

    }
}
